<?php

class Book {
    public $title;
    protected $author;
    private $price;

    // Constructor to initialize the book's properties
    public function __construct($title, $author, $price) {
        $this->title = $title;
        $this->author = $author;
        $this->setPrice($price);
    }

    // Method to get the details of the book
    public function getDetails() {
        return "Title: {$this->title}, Author: {$this->author}, Price: {$this->price}";
    }

    // Method to set the price of the book
    public function setPrice($price) {
        if ($price > 0) {
            $this->price = $price;
        } else {
            echo "Price must be positive.\n";
        }
    }

    // Magic method to handle calls to non-existent methods
    public function __call($name, $arguments) {
        if ($name === 'updateStock') {
            return "Stock updated for {$this->title}.";
        }
        return "Method {$name} does not exist.";
    }
}

class Library {
    private $books = [];
    public $name;

    // Constructor to initialize the library's name
    public function __construct($name) {
        $this->name = $name;
    }

    // Method to add a book to the library
    public function addBook(Book $book) {
        $this->books[] = $book;
    }

    // Method to remove a book from the library by title
    public function removeBook($title) {
        foreach ($this->books as $key => $book) {
            if ($book->title === $title) {
                unset($this->books[$key]);
                echo "Removed: {$title}\n";
                return;
            }
        }
        echo "Book not found: {$title}\n";
    }

    // Method to list all books in the library
    public function listBooks() {
        if (empty($this->books)) {
            echo "No books in the library.\n";
            return;
        }
        foreach ($this->books as $book) {
            echo $book->getDetails() . "\n";
        }
    }

    // Destructor to clear the library
    public function __destruct() {
        echo "Library '{$this->name}' is now closed.\n";
    }
}




Explanation of the Approach
Class Structure:

1. This class, named Book, declares properties public, protected, and private to demonstrate the usage of access modifiers. Class Library maintains a collection of objects of class Book and encapsulates a collection.
2. Constructors and Destructors: Each class has been provided with a constructor aimed at initializing properties. A destructor is used in the Library class to print out a message while the library is closed, making sure that all resources are cleaned up.
3. Method Overloading: The __call() magic method in Book will emulate method overloading. This magic method accepts calls for methods that actually do not exist; this enables flexible method handling.
4. To illustrate this working, the following implementation instantiates Book and Library, adds books, updates the price, removes books, and lists remaining books to show what the system is capable of.
